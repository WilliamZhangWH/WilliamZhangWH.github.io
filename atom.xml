<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[William的个人博客]]></title>
  <subtitle><![CDATA[iOS Developer.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://WilliamZhangWH.github.io/"/>
  <updated>2016-01-25T10:23:10.000Z</updated>
  <id>http://WilliamZhangWH.github.io/</id>
  
  <author>
    <name><![CDATA[William Zhang]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[谷歌翻译TabBar点击效果动画复刻]]></title>
    <link href="http://WilliamZhangWH.github.io/2016/01/25/%E8%B0%B7%E6%AD%8C%E7%BF%BB%E8%AF%91TabBar%E7%82%B9%E5%87%BB%E6%95%88%E6%9E%9C%E5%8A%A8%E7%94%BB%E5%A4%8D%E5%88%BB/"/>
    <id>http://WilliamZhangWH.github.io/2016/01/25/谷歌翻译TabBar点击效果动画复刻/</id>
    <published>2016-01-25T09:25:06.000Z</published>
    <updated>2016-01-25T10:23:10.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u9879_u76EE_u540D_u79F0_uFF1AWWAnimationTabbar"><a href="#u9879_u76EE_u540D_u79F0_uFF1AWWAnimationTabbar" class="headerlink" title="项目名称：WWAnimationTabbar"></a>项目名称：WWAnimationTabbar</h1><h3 id="u9879_u76EE_u5730_u5740_uFF1Ahttps_3A//github-com/WilliamZhangWH/WWAnimationTabbar"><a href="#u9879_u76EE_u5730_u5740_uFF1Ahttps_3A//github-com/WilliamZhangWH/WWAnimationTabbar" class="headerlink" title="项目地址：https://github.com/WilliamZhangWH/WWAnimationTabbar"></a>项目地址：<a href="https://github.com/WilliamZhangWH/WWAnimationTabbar" target="_blank" rel="external">https://github.com/WilliamZhangWH/WWAnimationTabbar</a></h3><h4 id="u6548_u679C_u5C55_u793A"><a href="#u6548_u679C_u5C55_u793A" class="headerlink" title="效果展示"></a>效果展示</h4><p><img src="https://raw.githubusercontent.com/WilliamZhangWH/WWAnimationTabbar/master/screenshot/WWAnimationTabbar.gif" alt="image"></p>
<h4 id="u8C03_u7528_u65B9_u6CD5"><a href="#u8C03_u7528_u65B9_u6CD5" class="headerlink" title="调用方法"></a>调用方法</h4><blockquote>
<p>increasedHeight为0即为系统TabBar高度</p>
</blockquote>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="pp">- <span class="params">(instancetype)</span>initWithFrame:<span class="params">(<span class="variable">CGRect</span>)</span>frame increasedHeight:<span class="params">(<span class="variable">CGFloat</span>)</span>height;</span></span><br></pre></td></tr></table></figure>
<h4 id="u4EE3_u7406_u65B9_u6CD5"><a href="#u4EE3_u7406_u65B9_u6CD5" class="headerlink" title="代理方法"></a>代理方法</h4><blockquote>
<p>记录从哪里跳转到哪里</p>
</blockquote>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="pp">- <span class="params">(void)</span>tabBar:<span class="params">(<span class="variable">WWTabBar</span> *)</span>tabBar selectedFrom:<span class="params">(<span class="variable">NSInteger</span>)</span>from to:<span class="params">(<span class="variable">NSInteger</span>)</span>to;</span></span><br></pre></td></tr></table></figure>
<h4 id="u6309_u94AE_u70B9_u51FB_u5706_u5F62_u6269_u5C55_u52A8_u753B_u539F_u7406"><a href="#u6309_u94AE_u70B9_u51FB_u5706_u5F62_u6269_u5C55_u52A8_u753B_u539F_u7406" class="headerlink" title="按钮点击圆形扩展动画原理"></a>按钮点击圆形扩展动画原理</h4><p><strong>原理：创建CAShapeLayer图层，通过UIBezierPath创建两个绘图路径，再通过CABasicAnimation完成两个绘图路径之间动画转变</strong></p>
<blockquote>
<p>图层创建&gt;&gt; </p>
</blockquote>
<figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="component">- (CAShapeLayer *)circlePathLayer     &#123;</span><br><span class="line">   	if (!_circlePathLayer)     &#123;</span><br><span class="line">   	_circlePathLayer = [[CAShapeLayer alloc]init];</span><br><span class="line">   	_circlePathLayer<span class="string">.frame</span> = self<span class="string">.bounds</span>;</span><br><span class="line">       </span><br><span class="line">   	CGRect circleFrame = CGRectMake(0, 0, circleRadius, circleRadius);</span><br><span class="line">   	circleFrame<span class="string">.origin.x</span> = CGRectGetMidX(_circlePathLayer<span class="string">.bounds)</span>;</span><br><span class="line">   	circleFrame<span class="string">.origin.y</span> = CGRectGetMidY(_circlePathLayer<span class="string">.bounds)</span>;</span><br><span class="line">   	self<span class="string">.circleFrame</span> = circleFrame;</span><br><span class="line">       </span><br><span class="line">   	_circlePathLayer<span class="string">.path</span> = [self getSmallCirclePath]<span class="string">.CGPath</span>;</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">   	self<span class="string">.layer.masksToBounds</span> = YES;</span><br><span class="line">   	_circlePathLayer<span class="string">.fillColor</span> = Shadow_Color<span class="string">.CGColor</span>;</span><br><span class="line">   	_circlePathLayer<span class="string">.backgroundColor=</span> [UIColor clearColor]<span class="string">.CGColor</span>;    </span><br><span class="line"></span><br><span class="line">   	/* 添加到按钮的第一层 这样不会覆盖按钮的Image *    /</span><br><span class="line">   	[self<span class="string">.layer</span> insertSublayer:_circlePathLayer atIndex:0];</span><br><span class="line">       &#125;</span></span><br><span class="line">   	return _circlePathLayer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>绘图路径创建 （需要创建两个路径，第一个是点击时候出现的一个小圆，第二个是覆盖整个按钮的一个大圆）</strong></p>
<blockquote>
<p>小圆路径创建</p>
</blockquote>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- <span class="list">(<span class="keyword">UIBezierPath</span> <span class="variable">*)getSmallCirclePath &#123;</span><br><span class="line">    UIBezierPath *</span>path = [UIBezierPath bezierPathWithArcCenter<span class="keyword">:CGPointMake</span><span class="list">(<span class="keyword">self</span>.circleFrame.origin.x, self.circleFrame.origin.y)</span> radius<span class="keyword">:circleRadius</span> startAngle:<span class="number">0.0</span> endAngle<span class="keyword">:M_PI*2</span> clockwise<span class="keyword">:YES</span>]<span class="comment">;</span></span><br><span class="line">    return path<span class="comment">;</span></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>大圆路径创建</p>
</blockquote>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">UIBezierPath</span> *)getBigCirclePath &#123;</span><br><span class="line">    <span class="comment">/* 求按钮对角线的距离 即为大圆的半径 这样不论点击按钮的任何位置大圆都可完全覆盖 */</span></span><br><span class="line">    <span class="comment">/* 函数功能:已知直角三角形的两个直角边，求斜边*/</span></span><br><span class="line">    <span class="built_in">CGFloat</span> bigCircleRadius = hypotf(<span class="keyword">self</span><span class="variable">.bounds</span><span class="variable">.size</span><span class="variable">.width</span>, <span class="keyword">self</span><span class="variable">.bounds</span><span class="variable">.size</span><span class="variable">.height</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPathWithArcCenter:<span class="built_in">CGPointMake</span>(<span class="keyword">self</span><span class="variable">.circleFrame</span><span class="variable">.origin</span><span class="variable">.x</span>, <span class="keyword">self</span><span class="variable">.circleFrame</span><span class="variable">.origin</span><span class="variable">.y</span>) radius:bigCircleRadius startAngle:<span class="number">0.0</span> endAngle:M_PI*<span class="number">2</span> clockwise:<span class="literal">YES</span>];</span><br><span class="line">    <span class="keyword">return</span> path;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>小圆到大圆的扩张动画</p>
</blockquote>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)pathExpandAnimate &#123;</span><br><span class="line">    <span class="built_in">CABasicAnimation</span> *circleAnimtion = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"path"</span>];</span><br><span class="line">    circleAnimtion<span class="variable">.removedOnCompletion</span> = <span class="literal">NO</span>;</span><br><span class="line">    circleAnimtion<span class="variable">.duration</span> = <span class="number">0.3</span>;</span><br><span class="line">    circleAnimtion<span class="variable">.fromValue</span> = (__bridge <span class="keyword">id</span>)[<span class="keyword">self</span> getSmallCirclePath]<span class="variable">.CGPath</span>;</span><br><span class="line">    circleAnimtion<span class="variable">.toValue</span> = (__bridge <span class="keyword">id</span>)[<span class="keyword">self</span> getBigCirclePath]<span class="variable">.CGPath</span>;</span><br><span class="line">    _circlePathLayer<span class="variable">.path</span> = [<span class="keyword">self</span> getBigCirclePath]<span class="variable">.CGPath</span>;</span><br><span class="line">    [_circlePathLayer addAnimation:circleAnimtion forKey:<span class="string">@"animPath"</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>通过按钮的触摸事件来触发动画的开始和结束</p>
</blockquote>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">   - (<span class="keyword">void</span>)showCircleLayerWithPoint:(<span class="built_in">CGPoint</span>)position &#123;</span><br><span class="line">       [<span class="keyword">self</span> circlePathLayer];</span><br><span class="line">       <span class="comment">/* 传递手指点击的位置 */</span></span><br><span class="line">       <span class="keyword">self</span><span class="variable">.circlePathLayer</span><span class="variable">.position</span> = position;</span><br><span class="line">       [<span class="keyword">self</span> pathExpandAnimate];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">   	<span class="comment">/* 执行按钮的事件方法 不写不会执行 */</span></span><br><span class="line">   	[<span class="keyword">self</span> sendActionsForControlEvents:<span class="built_in">UIControlEventTouchDown</span>];</span><br><span class="line">   	<span class="built_in">UITouch</span> *touch = [touches anyObject];</span><br><span class="line">   	<span class="built_in">CGPoint</span> point = [touch locationInView:<span class="keyword">self</span>];</span><br><span class="line">   </span><br><span class="line">   	[<span class="keyword">self</span> showCircleLayerWithPoint:point];    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)touchesEnded:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">   	[_circlePathLayer removeFromSuperlayer];</span><br><span class="line">   	_circlePathLayer = <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="u53C2_u8003_u6587_u6863"><a href="#u53C2_u8003_u6587_u6863" class="headerlink" title="参考文档"></a>参考文档</h5><p><a href="http://www.07net01.com/2015/07/874188.html" target="_blank" rel="external">http://www.07net01.com/2015/07/874188.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u9879_u76EE_u540D_u79F0_uFF1AWWAnimationTabbar"><a href="#u9879_u76EE_u540D_u79F0_uFF1AWWAnimationTabbar" class="headerlink" title="]]>
    </summary>
    
      <category term="iOS开发" scheme="http://WilliamZhangWH.github.io/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="个人项目" scheme="http://WilliamZhangWH.github.io/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用hexo搭建个人博客时遇到的坑]]></title>
    <link href="http://WilliamZhangWH.github.io/2016/01/23/%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>http://WilliamZhangWH.github.io/2016/01/23/用hexo搭建个人博客时遇到的坑/</id>
    <published>2016-01-23T07:52:07.000Z</published>
    <updated>2016-01-25T08:09:12.000Z</updated>
    <content type="html"><![CDATA[<h5 id="u9996_u5148_uFF0C_u6211_u60F3_u8BF4_u7248_u672C_u5F88_u91CD_u8981_uFF0C_u4E0B_u9762_u6211_u8BF4_u4E00_u4E0B_u6211_u5B89_u88C5_u7684_u7248_u672C_u4FE1_u606F_uFF1A"><a href="#u9996_u5148_uFF0C_u6211_u60F3_u8BF4_u7248_u672C_u5F88_u91CD_u8981_uFF0C_u4E0B_u9762_u6211_u8BF4_u4E00_u4E0B_u6211_u5B89_u88C5_u7684_u7248_u672C_u4FE1_u606F_uFF1A" class="headerlink" title="首先，我想说版本很重要，下面我说一下我安装的版本信息："></a>首先，我想说版本很重要，下面我说一下我安装的版本信息：</h5><ul>
<li>Homebrew 0.9.5 </li>
<li>node.js v5.5.0</li>
<li>npm 3.5.3</li>
<li>hexo 3.1.1</li>
</ul>
<h5 id="u4F7F_u7528Homebrew_u6765_u5B89_u88C5node-js_u6211_u4E2A_u4EBA_u89C9_u5F97_u5E94_u8BE5_u662F_u6700_u65B9_u4FBF_u7684_u65B9_u6CD5"><a href="#u4F7F_u7528Homebrew_u6765_u5B89_u88C5node-js_u6211_u4E2A_u4EBA_u89C9_u5F97_u5E94_u8BE5_u662F_u6700_u65B9_u4FBF_u7684_u65B9_u6CD5" class="headerlink" title="使用Homebrew来安装node.js我个人觉得应该是最方便的方法"></a>使用<a href="http://brew.sh/index_zh-cn.html" title="Homebrew" target="_blank" rel="external">Homebrew</a>来安装node.js我个人觉得应该是最方便的方法</h5><blockquote>
<p>Homebrew安装方法(打开终端窗口, 粘贴一下脚本)</p>
</blockquote>
<pre><code>$ ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;
</code></pre><h5 id="u7136_u540E_u901A_u8FC7Homebrew_u5B89_u88C5node-js"><a href="#u7136_u540E_u901A_u8FC7Homebrew_u5B89_u88C5node-js" class="headerlink" title="然后通过Homebrew安装node.js"></a>然后通过Homebrew安装node.js</h5><pre><code>$ brew install node
</code></pre><p><strong>通过Homebrew安装的node.js是最新的版本，我尝试过从<a href="https://nodejs.org/en/" target="_blank" rel="external">node.js官网</a>上安装了老的版本，结果之后发生了很多问题，如果你也安装了之前的版本，可以通过下面的命令删除</strong></p>
<pre><code>sudo rm -rf /usr/local/{bin/{node,npm},lib/node_modules/npm,lib/node,share/man/*/node.*}
</code></pre><h5 id="u201CNPM_3ACOMMAND_NOT_FOUND_u201D__u95EE_u9898_u89E3_u51B3_u65B9_u6CD5"><a href="#u201CNPM_3ACOMMAND_NOT_FOUND_u201D__u95EE_u9898_u89E3_u51B3_u65B9_u6CD5" class="headerlink" title="“NPM:COMMAND NOT FOUND” 问题解决方法"></a>“NPM:COMMAND NOT FOUND” 问题解决方法</h5><p><strong>安装node.js的时候会顺带安装npm，需要将根目录下名为.npm的隐藏文件删除，再用brew重新安装以下即可</strong></p>
<blockquote>
<p>打开终端，输入以下命令</p>
</blockquote>
<pre><code>cd ~
sudo rm -rf .npm
brew update
brew uninstall npm
brew install npm
</code></pre><h5 id="u90E8_u7F72_u4EE3_u7801_hexo_deploy__u65E0_u6548_uFF0C__u53EF_u4EE5_u901A_u8FC7_u4EE5_u4E0B_u547D_u4EE4_u89E3_u51B3"><a href="#u90E8_u7F72_u4EE3_u7801_hexo_deploy__u65E0_u6548_uFF0C__u53EF_u4EE5_u901A_u8FC7_u4EE5_u4E0B_u547D_u4EE4_u89E3_u51B3" class="headerlink" title="部署代码 hexo deploy 无效， 可以通过以下命令解决"></a>部署代码 hexo deploy 无效， 可以通过以下命令解决</h5><pre><code>npm install hexo-deployer-git --save
</code></pre><p><strong>执行完之后重新执行hexo deploy本地文件就会部署到远程仓库里面</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<h5 id="u9996_u5148_uFF0C_u6211_u60F3_u8BF4_u7248_u672C_u5F88_u91CD_u8981_uFF0C_u4E0B_u9762_u6211_u8BF4_u4E00_u4E0B_u6211_u5B89_u88C5_u7684_]]>
    </summary>
    
      <category term="hexo" scheme="http://WilliamZhangWH.github.io/tags/hexo/"/>
    
      <category term="技术总结" scheme="http://WilliamZhangWH.github.io/categories/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
